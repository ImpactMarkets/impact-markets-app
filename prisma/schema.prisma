// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
// Migrations: https://github.com/prisma/prisma/issues/11555#issuecomment-1027242342
// npx prisma migrate diff --preview-feature --from-migrations prisma/migrations --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/$(date +%Y%m%d%H%M%S)_<name>/migration.sql

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Right {
  RECOGNITION
  RETROACTIVE_FUNDING
}

enum HoldingType {
  OWNERSHIP
  RESERVATION
  CONSUMPTION
}

enum TransactionState {
  PENDING
  CONFIRMED
  REJECTED
}

enum DonationState {
  PENDING
  CONFIRMED
  REJECTED
}

enum EventType {
  COMMENT
  DONATION
  PROJECT
  BOUNTY
}

enum EventStatus {
  PENDING
  COMPLETED
  DROPPED
}

enum BountyStatus {
  ACTIVE
  CLAIMED
  CLOSED
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("Anonymous")
  email         String?   @unique
  emailVerified DateTime?
  image         String    @default("")
  title         String    @default("")
  role          Role      @default(USER)
  proofUrl      String    @default("")
  paymentUrl    String    @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // This should only change the interface but not anything functionally
  prefersDetailView         Boolean @default(false)
  prefersAnonymity          Boolean @default(false)
  prefersEventNotifications Boolean @default(true)

  accounts           Account[]
  sessions           Session[]
  notificationEvents Event[]
  comments           Comment[]
  donations          Donation[]
  holdings           Holding[]
  certificates       Certificate[]
  likedCertificates  LikedCertificate[]
  issuedCertificates CertificateIssuer[]
  projects           Project[]
  likedProjects      LikedProject[]
  bounties           Bounty[]
  likedBounties      LikedBounty[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String    @id @default(cuid())
  title          String    @db.VarChar(255)
  content        String
  contentHtml    String
  hidden         Boolean   @default(false)
  credits        Decimal   @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String
  actionStart    DateTime?
  actionEnd      DateTime?
  tags           String    @default("")
  paymentUrl     String    @default("")
  solvesBountyId String?

  author       User           @relation(fields: [authorId], references: [id], onDelete: Restrict)
  donations    Donation[]
  certificates Certificate[]
  likedBy      LikedProject[]
  comments     Comment[]

  @@index([authorId])
}

model Certificate {
  id             String   @id @default(cuid())
  oldId          Int?     @unique
  title          String   @db.VarChar(255)
  content        String
  // Is it optimal to prerender the MD to HTML?
  contentHtml    String
  counterfactual String   @default("")
  hidden         Boolean  @default(true)
  credits        Decimal  @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  authorId       String
  projectId      String?

  // TODO: Move these to CertificateVersion to enable versioning
  location    String   @default("")
  rights      Right    @default(RETROACTIVE_FUNDING)
  actionStart DateTime
  actionEnd   DateTime
  tags        String   @default("")

  author   User                @relation(fields: [authorId], references: [id], onDelete: Restrict)
  holdings Holding[]
  issuers  CertificateIssuer[]
  likedBy  LikedCertificate[]
  project  Project?            @relation(fields: [projectId], references: [id], onDelete: Restrict)

  @@index([authorId])
}

model Bounty {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(255)
  content     String
  contentHtml String
  size        Decimal
  deadline    DateTime?
  sourceUrl   String    @default("")
  tags        String    @default("")

  status    BountyStatus @default(ACTIVE)
  hidden    Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  authorId  String

  likedBy  LikedBounty[]
  comments Comment[]
  author   User          @relation(fields: [authorId], references: [id], onDelete: Restrict)

  @@index([authorId])
}

model LikedProject {
  projectId String
  userId    String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model LikedCertificate {
  certificateId String
  userId        String
  createdAt     DateTime @default(now())

  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([certificateId, userId])
  @@index([certificateId])
  @@index([userId])
}

model LikedBounty {
  bountyId  String
  userId    String
  createdAt DateTime @default(now())

  bounty Bounty @relation(fields: [bountyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([bountyId, userId])
  @@index([bountyId])
  @@index([userId])
}

model CertificateIssuer {
  certificateId String
  userId        String

  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([certificateId, userId])
  @@index([certificateId])
  @@index([userId])
}

model Holding {
  id            Int         @id @default(autoincrement())
  certificateId String
  userId        String
  type          HoldingType @default(OWNERSHIP)

  size      Decimal @default(0)
  cost      Decimal @default(0) // Only needed for the potential future reward mode
  valuation Decimal @default(1) // Minimum valuation for offers
  target    Decimal @default(1000000)

  certificate      Certificate   @relation(fields: [certificateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sellTransactions Transaction[] @relation("sellingHolding")
  buyTransactions  Transaction[] @relation("buyingHolding")

  @@unique([certificateId, userId, type])
  @@index([certificateId])
  @@index([userId])
  @@index([type])
}

model Donation {
  id        Int           @id @default(autoincrement())
  time      DateTime
  amount    Decimal
  projectId String
  userId    String
  state     DonationState @default(CONFIRMED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  contentHtml String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  projectId   String?
  parentId    Int?
  bountyId    String?

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bounty   Bounty?   @relation(fields: [bountyId], references: [id])
  parent   Comment?  @relation("parentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("parentChildren")

  @@index([authorId])
  @@index([projectId])
  @@index([bountyId])
}

model Transaction {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  state            TransactionState @default(PENDING)
  consume          Boolean          @default(false)
  size             Decimal
  cost             Decimal
  sellingHoldingId Int
  buyingHoldingId  Int

  sellingHolding Holding @relation("sellingHolding", fields: [sellingHoldingId], references: [id])
  buyingHolding  Holding @relation("buyingHolding", fields: [buyingHoldingId], references: [id])

  @@index([sellingHoldingId])
  @@index([buyingHoldingId])
}

model Event {
  id          Int         @id @default(autoincrement())
  time        DateTime    @default(now())
  type        EventType
  parameters  Json
  status      EventStatus @default(PENDING)
  recipientId String

  recipient User @relation(fields: [recipientId], references: [id], onDelete: Cascade)
}
