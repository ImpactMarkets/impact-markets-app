// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
// Migrations: https://github.com/prisma/prisma/issues/11555#issuecomment-1027242342

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  USER
  ADMIN
}

enum Right {
  RETROACTIVE_FUNDING
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  role          Role         @default(USER)

  transactionsSent     Transaction[] @relation("sender")
  transactionsReceived Transaction[] @relation("receiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// TODO: Rename to Certificate
model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  // TODO: Rename to something like description
  content     String
  // Is it optimal to prerender the MD to HTML?
  contentHtml String
  hidden      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    String
  likedBy     LikedPosts[]
  comments    Comment[]

  // TODO: Move these to CertificateVersion to enable versioning
  attributedImpactVersion String
  proof                   String    @default("")
  location                String    @default("")
  rights                  Right     @default(RETROACTIVE_FUNDING)
  actionStart             DateTime
  actionEnd               DateTime
  impactStart             DateTime?
  impactEnd               DateTime?
  tags                    String?

  // TODO: Rename to issuer or replace with group of issuers, such as an org
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  transaction Transaction[]

  @@index([authorId])
}

model LikedPosts {
  postId    Int
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  contentHtml String
  createdAt   DateTime @default(now())
  authorId    String
  postId      Int

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([postId])
}

model Transaction {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  state      String
  size       Decimal
  cost       Decimal
  senderId   String
  receiverId String
  postId     Int

  sender   User @relation("sender", fields: [senderId], references: [id])
  receiver User @relation("receiver", fields: [receiverId], references: [id])
  post     Post @relation(fields: [postId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([postId])
}
