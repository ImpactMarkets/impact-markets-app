// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
// Migrations: https://github.com/prisma/prisma/issues/11555#issuecomment-1027242342
// npx prisma migrate diff --preview-feature --from-migrations prisma/migrations --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/$(date +%Y%m%d%H%M%S)_<name>/migration.sql

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex", "interactiveTransactions"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  USER
  ADMIN
}

enum Right {
  RECOGNITION
  RETROACTIVE_FUNDING
}

enum HoldingType {
  OWNERSHIP
  RESERVATION
  CONSUMPTION
}

enum TransactionState {
  PENDING
  CONFIRMED
  REJECTED
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  title            String?
  accounts         Account[]
  sessions         Session[]
  certificates     Certificate[]
  likedCertificate LikedCertificate[]
  comments         Comment[]
  role             Role               @default(USER)

  holdings Holding[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Certificate {
  id             String             @id @default(cuid())
  oldId          Int?
  title          String             @db.VarChar(255)
  content        String
  // Is it optimal to prerender the MD to HTML?
  contentHtml    String
  counterfactual String             @default("")
  hidden         Boolean            @default(true)
  unique         Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  authorId       String
  likedBy        LikedCertificate[]
  comments       Comment[]

  // TODO: Move these to CertificateVersion to enable versioning
  attributedImpactVersion String
  proof                   String   @default("")
  location                String   @default("")
  rights                  Right    @default(RETROACTIVE_FUNDING)
  actionStart             DateTime
  actionEnd               DateTime
  tags                    String?

  author   User      @relation(fields: [authorId], references: [id], onDelete: Restrict)
  holdings Holding[]

  @@index([authorId])
}

model LikedCertificate {
  certificateId String
  userId        String
  createdAt     DateTime @default(now())

  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([certificateId, userId])
  @@index([certificateId])
  @@index([userId])
}

model Holding {
  id            Int         @id @default(autoincrement())
  certificateId String
  userId        String
  type          HoldingType @default(OWNERSHIP)

  size      Decimal @default(0)
  cost      Decimal @default(0) // Only needed for the potential future reward mode
  valuation Decimal @default(1) // Minimum valuation for offers
  target    Decimal @default(100000)

  certificate      Certificate   @relation(fields: [certificateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sellTransactions Transaction[] @relation("sellingHolding")
  buyTransactions  Transaction[] @relation("buyingHolding")

  @@unique([certificateId, userId, type])
  @@index([certificateId])
  @@index([userId])
  @@index([type])
}

model Comment {
  id            Int      @id @default(autoincrement())
  content       String
  contentHtml   String
  createdAt     DateTime @default(now())
  authorId      String
  certificateId String

  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([certificateId])
}

model Transaction {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  state            TransactionState @default(PENDING)
  consume          Boolean          @default(false)
  size             Decimal
  cost             Decimal
  sellingHoldingId Int
  buyingHoldingId  Int

  sellingHolding Holding @relation("sellingHolding", fields: [sellingHoldingId], references: [id])
  buyingHolding  Holding @relation("buyingHolding", fields: [buyingHoldingId], references: [id])

  @@index([sellingHoldingId])
  @@index([buyingHoldingId])
}
